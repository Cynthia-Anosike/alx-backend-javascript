{"{\"assumptions\":{},\"sourceRoot\":\"/home/premzycynx/programming/alx-backend-javascript/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/premzycynx/programming/alx-backend-javascript\",\"filename\":\"/home/premzycynx/programming/alx-backend-javascript/main.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/premzycynx/programming/alx-backend-javascript\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-unicode-sets-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-class-static-block\",\"visitor\":{\"ClassBody\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-private-property-in-object\",\"visitor\":{\"BinaryExpression\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"syntax-class-properties\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-private-methods\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"syntax-numeric-separator\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-logical-assignment-operators\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-nullish-coalescing-operator\",\"visitor\":{\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-optional-chaining\",\"visitor\":{\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-json-strings\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-optional-catch-binding\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-async-generators\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-object-rest-spread\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-export-namespace-from\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dynamic-import\",\"visitor\":{\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-import-meta\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]}],\"presets\":[]}:7.22.9:development":{"value":{"code":"\"use strict\";\n\n/*\nUsing spread syntax, concatenate 2 arrays and each character of a string by modifying the\nfunction below. Your function body should be one line long.\n*/\nfunction concatArrays(array1, array2, string) {\n  return [...array1, ...array2, ...string];\n}\nconsole.log(concatArrays(['a', 'b', 'c'], [1, 2], 'Hello'));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb25jYXRBcnJheXMiLCJhcnJheTEiLCJhcnJheTIiLCJzdHJpbmciLCJjb25zb2xlIiwibG9nIl0sInNvdXJjZVJvb3QiOiIvaG9tZS9wcmVtenljeW54L3Byb2dyYW1taW5nL2FseC1iYWNrZW5kLWphdmFzY3JpcHQvIiwic291cmNlcyI6WyJtYWluLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5Vc2luZyBzcHJlYWQgc3ludGF4LCBjb25jYXRlbmF0ZSAyIGFycmF5cyBhbmQgZWFjaCBjaGFyYWN0ZXIgb2YgYSBzdHJpbmcgYnkgbW9kaWZ5aW5nIHRoZVxuZnVuY3Rpb24gYmVsb3cuIFlvdXIgZnVuY3Rpb24gYm9keSBzaG91bGQgYmUgb25lIGxpbmUgbG9uZy5cbiovXG5mdW5jdGlvbiBjb25jYXRBcnJheXMoYXJyYXkxLCBhcnJheTIsIHN0cmluZykge1xuICByZXR1cm4gWy4uLmFycmF5MSwgLi4uYXJyYXkyLCAuLi5zdHJpbmddO1xufVxuY29uc29sZS5sb2coY29uY2F0QXJyYXlzKFsnYScsICdiJywgJ2MnXSwgWzEsIDJdLCAnSGVsbG8nKSk7XG4iXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQSxZQUFZQSxDQUFDQyxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsTUFBTSxFQUFFO0VBQzVDLE9BQU8sQ0FBQyxHQUFHRixNQUFNLEVBQUUsR0FBR0MsTUFBTSxFQUFFLEdBQUdDLE1BQU0sQ0FBQztBQUMxQztBQUNBQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0wsWUFBWSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQyJ9","map":{"version":3,"names":["concatArrays","array1","array2","string","console","log"],"sourceRoot":"/home/premzycynx/programming/alx-backend-javascript/","sources":["main.js"],"sourcesContent":["/*\nUsing spread syntax, concatenate 2 arrays and each character of a string by modifying the\nfunction below. Your function body should be one line long.\n*/\nfunction concatArrays(array1, array2, string) {\n  return [...array1, ...array2, ...string];\n}\nconsole.log(concatArrays(['a', 'b', 'c'], [1, 2], 'Hello'));\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA,SAASA,YAAYA,CAACC,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAE;EAC5C,OAAO,CAAC,GAAGF,MAAM,EAAE,GAAGC,MAAM,EAAE,GAAGC,MAAM,CAAC;AAC1C;AACAC,OAAO,CAACC,GAAG,CAACL,YAAY,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC"}},"mtime":1690428356419}}